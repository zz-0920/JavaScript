function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
import fs from 'node:fs';
import { writeFile } from 'node:fs/promises';
import path from 'node:path';
import puppeteer from 'puppeteer';
import { Buffer as Buffer$1 } from 'node:buffer';
import Url, { fileURLToPath } from 'node:url';
import chalk from 'chalk';
import http from 'node:http';
import https from 'node:https';
import querystring from 'node:querystring';
import { HttpsProxyAgent } from 'https-proxy-agent';
import OpenAI from 'openai';
import ora from 'ora';
import { Ollama } from 'ollama'; // Log
var log = console.log;
var logStart = chalk.blueBright;
var logStatistics = chalk.whiteBright;
var logSuccess = chalk.green;
var logError = chalk.red;
var logWarn = chalk.yellow;
var logNumber = chalk.hex('#a57fff');
var whiteBold = chalk.white.bold;
var isUndefined = function isUndefined(value) {
  return typeof value === 'undefined';
};
var isNumber = function isNumber(value) {
  return typeof value === 'number';
};
var isString = function isString(value) {
  return typeof value === 'string';
};
var isBoolean = function isBoolean(value) {
  return typeof value === 'boolean';
};
var isObject = function isObject(value) {
  return _typeof(value) === 'object' && value !== null && !Array.isArray(value);
};
var isArray = Array.isArray;
var isFunction = function isFunction(value) {
  return typeof value === 'function';
};
var isPromise = function isPromise(value) {
  return isObject(value) && isFunction(value.then) && isFunction(value["catch"]);
};
var isBuffer = Buffer$1.isBuffer;
var dirname = function dirname(dirPath) {
  return path.dirname(fileURLToPath(isUndefined(dirPath) ? import.meta.url : new URL(dirPath, import.meta.url)));
};
function sleep(timeout) {
  return new Promise(function (resolve) {
    return setTimeout(resolve, timeout);
  });
}
function random(max) {
  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var result = Math.floor(Math.random() * max);
  while (result < min) {
    result = Math.floor(Math.random() * max);
  }
  return result;
}
function mergeSort(arr) {
  if (arr.length <= 1) return arr;
  var mid = Math.floor(arr.length / 2);
  var newLeftArr = mergeSort(arr.slice(0, mid));
  var newRightArr = mergeSort(arr.slice(mid));
  var newArr = [];
  var i = 0;
  var j = 0;
  while (i < newLeftArr.length && j < newRightArr.length) {
    if (newLeftArr[i] <= newRightArr[j]) {
      newArr.push(newLeftArr[i++]);
    } else {
      newArr.push(newRightArr[j++]);
    }
  }
  if (i < newLeftArr.length) {
    newArr.push.apply(newArr, _toConsumableArray(newLeftArr.slice(i)));
  }
  if (j < newRightArr.length) {
    newArr.push.apply(newArr, _toConsumableArray(newRightArr.splice(j)));
  }
  return newArr;
}
function useSleepByBatch(_x, _x2, _x3, _x4, _x5) {
  return _useSleepByBatch.apply(this, arguments);
}
function _useSleepByBatch() {
  _useSleepByBatch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(isHaventervalTime, isNumberIntervalTime, intervalTime, id, infoConfig) {
    var serialNumber, logConfig, timeout;
    return _regeneratorRuntime().wrap(function _callee14$(_context14) {
      while (1) switch (_context14.prev = _context14.next) {
        case 0:
          serialNumber = infoConfig.serialNumber, logConfig = infoConfig.logConfig;
          if (!(isHaventervalTime && id > 1)) {
            _context14.next = 8;
            break;
          }
          timeout = isNumberIntervalTime ? intervalTime : random(intervalTime.max, intervalTime.min);
          if (logConfig.process) {
            log("".concat(whiteBold(serialNumber), " | Target id: ").concat(logNumber(id), " - Sleep time: ").concat(logNumber(timeout + 'ms')));
          }
          _context14.next = 6;
          return sleep(timeout);
        case 6:
          _context14.next = 9;
          break;
        case 8:
          if (logConfig.process) {
            log("".concat(whiteBold(serialNumber), " | Target id: ").concat(logNumber(id), " - Sleep time: ").concat(logNumber('0ms')));
          }
        case 9:
        case "end":
          return _context14.stop();
      }
    }, _callee14);
  }));
  return _useSleepByBatch.apply(this, arguments);
}
function asyncBatchCrawl(_x6, _x7, _x8) {
  return _asyncBatchCrawl.apply(this, arguments);
}
function _asyncBatchCrawl() {
  _asyncBatchCrawl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(devices, infoConfig, singleCrawlHandle) {
    var intervalTime, isHaventervalTime, isNumberIntervalTime, crawlPendingQueue, _iterator, _step, device, _id;
    return _regeneratorRuntime().wrap(function _callee15$(_context15) {
      while (1) switch (_context15.prev = _context15.next) {
        case 0:
          intervalTime = infoConfig.intervalTime;
          isHaventervalTime = !isUndefined(intervalTime);
          isNumberIntervalTime = isNumber(intervalTime);
          crawlPendingQueue = [];
          _iterator = _createForOfIteratorHelper(devices);
          _context15.prev = 5;
          _iterator.s();
        case 7:
          if ((_step = _iterator.n()).done) {
            _context15.next = 15;
            break;
          }
          device = _step.value;
          _id = device.id;
          _context15.next = 12;
          return useSleepByBatch(isHaventervalTime, isNumberIntervalTime, intervalTime, _id, infoConfig);
        case 12:
          crawlPendingQueue.push(singleCrawlHandle(device, infoConfig));
        case 13:
          _context15.next = 7;
          break;
        case 15:
          _context15.next = 20;
          break;
        case 17:
          _context15.prev = 17;
          _context15.t0 = _context15["catch"](5);
          _iterator.e(_context15.t0);
        case 20:
          _context15.prev = 20;
          _iterator.f();
          return _context15.finish(20);
        case 23:
          _context15.next = 25;
          return Promise.all(crawlPendingQueue);
        case 25:
        case "end":
          return _context15.stop();
      }
    }, _callee15, null, [[5, 17, 20, 23]]);
  }));
  return _asyncBatchCrawl.apply(this, arguments);
}
function syncBatchCrawl(_x9, _x10, _x11) {
  return _syncBatchCrawl.apply(this, arguments);
}
function _syncBatchCrawl() {
  _syncBatchCrawl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(devices, infoConfig, singleCrawlHandle) {
    var intervalTime, isHaventervalTime, isNumberIntervalTime, _iterator2, _step2, device, _id2;
    return _regeneratorRuntime().wrap(function _callee16$(_context16) {
      while (1) switch (_context16.prev = _context16.next) {
        case 0:
          intervalTime = infoConfig.intervalTime;
          isHaventervalTime = !isUndefined(intervalTime);
          isNumberIntervalTime = isNumber(intervalTime);
          _iterator2 = _createForOfIteratorHelper(devices);
          _context16.prev = 4;
          _iterator2.s();
        case 6:
          if ((_step2 = _iterator2.n()).done) {
            _context16.next = 15;
            break;
          }
          device = _step2.value;
          _id2 = device.id;
          _context16.next = 11;
          return useSleepByBatch(isHaventervalTime, isNumberIntervalTime, intervalTime, _id2, infoConfig);
        case 11:
          _context16.next = 13;
          return singleCrawlHandle(device, infoConfig);
        case 13:
          _context16.next = 6;
          break;
        case 15:
          _context16.next = 20;
          break;
        case 17:
          _context16.prev = 17;
          _context16.t0 = _context16["catch"](4);
          _iterator2.e(_context16.t0);
        case 20:
          _context16.prev = 20;
          _iterator2.f();
          return _context16.finish(20);
        case 23:
        case "end":
          return _context16.stop();
      }
    }, _callee16, null, [[4, 17, 20, 23]]);
  }));
  return _syncBatchCrawl.apply(this, arguments);
}
function isCrawlStatusInHttpStatus(device) {
  var _detailTargetConfig$p;
  var detailTargetConfig = device.detailTargetConfig,
    detailTargetResult = device.detailTargetResult;
  var status = null;
  if (isObject(detailTargetResult) && Object.hasOwn(detailTargetResult, 'response') && detailTargetResult.response) {
    // crawlPage
    var response = detailTargetResult.response;
    status = response.status();
  } else if (isObject(detailTargetResult)) {
    var _detailTargetResult$s;
    // crawlData / crawlFie
    status = (_detailTargetResult$s = detailTargetResult.statusCode) !== null && _detailTargetResult$s !== void 0 ? _detailTargetResult$s : null;
  }
  var result = false;
  var switchByHttpStatus = (_detailTargetConfig$p = detailTargetConfig.proxy) === null || _detailTargetConfig$p === void 0 ? void 0 : _detailTargetConfig$p.switchByHttpStatus;
  if (status && switchByHttpStatus && switchByHttpStatus.includes(status)) {
    result = true;
  }
  return result;
}
function controller(_x12, _x13, _x14) {
  return _controller.apply(this, arguments);
}
function _controller() {
  _controller = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(detailTargets, infoConfig, singleCrawlHandle) {
    var serialNumber, mode, logConfig, isPriorityCrawl, detailTargetConfigs, devices, batchCrawl, i, crawlQueue, retriedIds, succssIds, errorIds;
    return _regeneratorRuntime().wrap(function _callee17$(_context17) {
      while (1) switch (_context17.prev = _context17.next) {
        case 0:
          serialNumber = infoConfig.serialNumber, mode = infoConfig.mode, logConfig = infoConfig.logConfig; // 是否使用优先爬取
          isPriorityCrawl = !detailTargets.every(function (item) {
            return item.priority === detailTargets[0].priority;
          });
          detailTargetConfigs = isPriorityCrawl ? mergeSort(detailTargets.map(function (item) {
            return _objectSpread(_objectSpread({}, item), {}, {
              valueOf: function valueOf() {
                return item.priority;
              }
            });
          })).reverse() : detailTargets; // 生成装置
          devices = detailTargetConfigs.map(function (detailTargetConfig, index) {
            var id = ++index;
            var maxRetry = detailTargetConfig.maxRetry,
              proxyDetails = detailTargetConfig.proxyDetails;
            var crawlErrorQueue = [];
            return {
              id: id,
              isHandle: false,
              isSuccess: false,
              isStatusNormal: false,
              detailTargetConfig: detailTargetConfig,
              detailTargetResult: null,
              maxRetry: maxRetry,
              retryCount: 0,
              proxyDetails: proxyDetails,
              crawlErrorQueue: crawlErrorQueue,
              result: {
                id: id,
                isSuccess: false,
                maxRetry: maxRetry,
                retryCount: 0,
                proxyDetails: proxyDetails,
                crawlErrorQueue: crawlErrorQueue,
                data: null
              }
            };
          });
          if (logConfig.start) {
            log("".concat(whiteBold(serialNumber), " | ").concat(logStart("Start crawling - mode: ".concat(mode, ", total: ").concat(devices.length))));
          }
          // 选择爬取模式
          batchCrawl = mode === 'async' ? asyncBatchCrawl : syncBatchCrawl;
          i = 0;
          crawlQueue = devices;
        case 8:
          if (!crawlQueue.length) {
            _context17.next = 15;
            break;
          }
          _context17.next = 11;
          return batchCrawl(crawlQueue, infoConfig, singleCrawlHandle);
        case 11:
          crawlQueue = crawlQueue.filter(function (device) {
            var isHandle = device.isHandle,
              retryCount = device.retryCount,
              maxRetry = device.maxRetry,
              detailTargetConfig = device.detailTargetConfig,
              proxyDetails = device.proxyDetails,
              crawlErrorQueue = device.crawlErrorQueue,
              isStatusNormal = device.isStatusNormal;
            // 没有被处理 / 没成功 / 状态码不符合
            var isRetry = false;
            var haveRetryChance = retryCount < maxRetry;
            if (!isHandle && haveRetryChance) {
              isRetry = true;
              // 轮换代理
              if (proxyDetails.length >= 2) {
                var _detailTargetConfig$p2;
                // 状态码 / 失败次数
                var switchByErrorCount = (_detailTargetConfig$p2 = detailTargetConfig.proxy) === null || _detailTargetConfig$p2 === void 0 ? void 0 : _detailTargetConfig$p2.switchByErrorCount;
                if (!isStatusNormal || !isUndefined(switchByErrorCount) && switchByErrorCount >= crawlErrorQueue.length) {
                  var _proxyDetails$find;
                  // 设置当前代理 URL 状态
                  proxyDetails.find(function (detail) {
                    return detail.url === detailTargetConfig.proxyUrl;
                  }).state = false;
                  // 寻找新代理 URL
                  var newProxyUrl = (_proxyDetails$find = proxyDetails.find(function (detaile) {
                    return detaile.state;
                  })) === null || _proxyDetails$find === void 0 ? void 0 : _proxyDetails$find.url;
                  // 使用新代理 URL
                  if (!isUndefined(newProxyUrl)) {
                    detailTargetConfig.proxyUrl = newProxyUrl;
                  }
                }
              }
            }
            return isRetry;
          });
          if (crawlQueue.length) {
            retriedIds = crawlQueue.map(function (item) {
              item.retryCount++;
              return item.id;
            });
            if (logConfig.process) {
              log("".concat(whiteBold(serialNumber), " | ").concat(logWarn("Start retrying - count: ".concat(++i, ", targets id: [ ").concat(retriedIds.join(', '), " ]"))));
            }
          }
          _context17.next = 8;
          break;
        case 15:
          // 统计结果
          if (logConfig.result) {
            succssIds = [];
            errorIds = [];
            devices.forEach(function (device) {
              if (device.isSuccess) {
                succssIds.push(device.id);
              } else {
                errorIds.push(device.id);
              }
            });
            log("".concat(whiteBold(serialNumber), " | ").concat(logStatistics("Crawl finish:"), "\n             ").concat(logSuccess("Success - total: ".concat(succssIds.length, ", targets id: [ ").concat(succssIds.join(', '), " ]")), "\n               ").concat(logError("Error - total: ".concat(errorIds.length, ", targets id: [ ").concat(errorIds.join(', '), " ]"))));
          }
          return _context17.abrupt("return", devices.map(function (device) {
            return device.result;
          }));
        case 17:
        case "end":
          return _context17.stop();
      }
    }, _callee17);
  }));
  return _controller.apply(this, arguments);
}
function parseHeaders(rawRequestConfig, contentConfig) {
  var _rawRequestConfig$hea;
  var rawHeaders = (_rawRequestConfig$hea = rawRequestConfig.headers) !== null && _rawRequestConfig$hea !== void 0 ? _rawRequestConfig$hea : {};
  var requestConfig = contentConfig.requestConfig,
    data = contentConfig.data;
  var headers = _objectSpread({
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36'
  }, rawHeaders);
  if (!isUndefined(data)) {
    var defaultHeaderConfig = [{
      key: 'Content-Type',
      value: 'application/json'
    }, {
      key: 'Content-Length',
      value: Buffer.byteLength(data)
    }];
    defaultHeaderConfig.forEach(function (item) {
      var key = item.key,
        value = item.value;
      if (isUndefined(rawHeaders[key])) {
        headers[key] = value;
      }
    });
  }
  requestConfig.headers = headers;
}
function createContentConfig(rawRequestConfig) {
  var _method$toLocaleUpper;
  var rawData = rawRequestConfig.data,
    url = rawRequestConfig.url,
    params = rawRequestConfig.params,
    proxyUrl = rawRequestConfig.proxyUrl,
    timeout = rawRequestConfig.timeout,
    method = rawRequestConfig.method;
  var _Url$URL = new Url.URL(url),
    protocol = _Url$URL.protocol,
    hostname = _Url$URL.hostname,
    port = _Url$URL.port,
    pathname = _Url$URL.pathname,
    search = _Url$URL.search;
  var path = pathname;
  if (search || params) {
    if (search) {
      path += "".concat(search).concat(params ? '&' + querystring.stringify(params) : '');
    } else {
      path += "?".concat(querystring.stringify(params));
    }
  }
  var contentConfig = {
    requestConfig: {
      agent: proxyUrl ? new HttpsProxyAgent(proxyUrl) : protocol === 'http:' ? new http.Agent() : new https.Agent(),
      protocol: protocol,
      hostname: hostname,
      port: port,
      path: path,
      method: (_method$toLocaleUpper = method === null || method === void 0 ? void 0 : method.toLocaleUpperCase()) !== null && _method$toLocaleUpper !== void 0 ? _method$toLocaleUpper : 'GET',
      headers: {},
      timeout: timeout
    },
    protocol: protocol,
    data: isObject(rawData) ? JSON.stringify(rawData) : rawData
  };
  parseHeaders(rawRequestConfig, contentConfig);
  return contentConfig;
}
function request(config) {
  return new Promise(function (resolve, reject) {
    var _createContentConfig = createContentConfig(config),
      requestConfig = _createContentConfig.requestConfig,
      protocol = _createContentConfig.protocol,
      data = _createContentConfig.data;
    function handleRes(res) {
      var statusCode = res.statusCode,
        headers = res.headers;
      var container = [];
      res.on('data', function (chunk) {
        return container.push(chunk);
      });
      res.on('end', function () {
        var data = Buffer.concat(container);
        var resolveRes = {
          statusCode: statusCode,
          headers: headers,
          data: data
        };
        resolve(resolveRes);
      });
    }
    var req = protocol === 'http:' ? http.request(requestConfig, handleRes) : https.request(requestConfig, handleRes);
    req.on('timeout', function () {
      reject(new Error("Timeout ".concat(requestConfig.timeout, "ms")));
    });
    req.on('error', function (err) {
      reject(err);
    });
    // 其他处理
    if (!isUndefined(data)) {
      req.write(data);
    }
    req.end();
  });
}
var fingerprints = [{
  platform: 'Windows',
  mobile: 'random',
  userAgent: {
    value: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36',
    versions: [{
      name: 'Chrome',
      maxMajorVersion: 112,
      minMajorVersion: 100,
      maxMinorVersion: 10,
      maxPatchVersion: 5615
    }, {
      name: 'Safari',
      maxMinorVersion: 36,
      maxPatchVersion: 2333
    }]
  }
}, {
  platform: 'Windows',
  mobile: 'random',
  userAgent: {
    value: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36 Edg/91.0.864.59',
    versions: [{
      name: 'Chrome',
      maxMajorVersion: 91,
      minMajorVersion: 88,
      maxMinorVersion: 10,
      maxPatchVersion: 5615
    }, {
      name: 'Safari',
      maxMinorVersion: 36,
      maxPatchVersion: 2333
    }, {
      name: 'Edg',
      maxMinorVersion: 10,
      maxPatchVersion: 864
    }]
  }
}, {
  platform: 'Windows',
  mobile: 'random',
  userAgent: {
    value: 'Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0',
    versions: [{
      name: 'Firefox',
      maxMajorVersion: 47,
      minMajorVersion: 43,
      maxMinorVersion: 10,
      maxPatchVersion: 5000
    }]
  }
}]; /* Function */
function parsePageCookies(url, cookies) {
  var cookiesArr = [];
  if (typeof cookies === 'string') {
    cookies.split('; ').forEach(function (item) {
      var cookie = item.split('=');
      cookiesArr.push({
        name: cookie[0],
        value: cookie[1],
        url: url
      });
    });
  } else if (Array.isArray(cookies)) {
    cookies.forEach(function (cookie) {
      if (!cookie.url) {
        cookie.url = url;
      }
      cookiesArr.push(cookie);
    });
  } else if (_typeof(cookies) === 'object' && cookies) {
    if (!cookies.url) {
      cookies.url = url;
    }
    cookiesArr.push(cookies);
  }
  return cookiesArr;
}
function transformTargetToDetailTargets(config) {
  return isArray(config) ? config.map(function (item) {
    return isObject(item) ? item : {
      url: item
    };
  }) : [isObject(config) ? config : {
    url: config
  }];
}
/* Loader config */
function loaderCommonFingerprintToDetailTarget(detail, fingerprint) {
  var ua = fingerprint.ua,
    platform = fingerprint.platform,
    platformVersion = fingerprint.platformVersion,
    mobile = fingerprint.mobile,
    acceptLanguage = fingerprint.acceptLanguage,
    userAgent = fingerprint.userAgent;
  var headers = detail.headers;
  if (!headers) {
    detail.headers = headers = {};
  }
  // 1.sec-ch-ua
  if (ua) {
    headers['sec-ch-ua'] = ua;
  }
  // 2.sec-ch-ua-mobile
  if (mobile) {
    headers['sec-ch-ua-mobile'] = mobile === 'random' ? random(2) ? '?1' : '?0' : mobile;
  }
  // 3.sec-ch-platform
  if (platform) {
    headers['sec-ch-platform'] = platform;
  }
  // 4.sec-ch-ua-platform-version
  if (platformVersion) {
    headers['sec-ch-ua-platform-version'] = platformVersion;
  }
  // 5.accept-language
  if (acceptLanguage) {
    headers['accept-language'] = acceptLanguage;
  }
  // 6.user-agent
  if (userAgent) {
    var _userAgent$versions;
    var value = userAgent.value;
    (_userAgent$versions = userAgent.versions) === null || _userAgent$versions === void 0 || _userAgent$versions.forEach(function (version) {
      var name = version.name,
        maxMajorVersion = version.maxMajorVersion,
        minMajorVersion = version.minMajorVersion,
        maxMinorVersion = version.maxMinorVersion,
        minMinorVersion = version.minMinorVersion,
        maxPatchVersion = version.maxPatchVersion,
        minPatchVersion = version.minPatchVersion;
      var nameSplit = value.split("".concat(name, "/"));
      var versionSplit = nameSplit[1].split(' ')[0].split('.');
      var originalVersion = versionSplit.join('.');
      if (!isUndefined(maxMajorVersion)) {
        versionSplit[0] = maxMajorVersion === minMajorVersion ? maxMajorVersion : random(maxMajorVersion, minMajorVersion);
      }
      if (!isUndefined(maxMinorVersion)) {
        versionSplit[1] = maxMinorVersion === minMinorVersion ? maxMinorVersion : random(maxMinorVersion, minMinorVersion);
      }
      if (!isUndefined(maxPatchVersion)) {
        versionSplit[2] = maxPatchVersion === minPatchVersion ? maxPatchVersion : random(maxPatchVersion, minPatchVersion);
      }
      var searchValue = "".concat(name, "/").concat(originalVersion);
      var replaceValue = "".concat(name, "/").concat(versionSplit.join('.'));
      value = value.replace(searchValue, replaceValue);
    });
    headers['user-agent'] = value;
  }
}
function loaderPageFingerprintToDetailTarget(detail, fingerprint) {
  var _detail$viewport;
  var maxWidth = fingerprint.maxWidth,
    minWidth = fingerprint.minWidth,
    maxHeight = fingerprint.maxHeight,
    minHidth = fingerprint.minHidth;
  var viewport = (_detail$viewport = detail.viewport) !== null && _detail$viewport !== void 0 ? _detail$viewport : {};
  // 1.width / height
  if (maxWidth) {
    viewport.width = maxWidth === minWidth ? maxWidth : random(maxWidth, minWidth);
  }
  if (maxHeight) {
    viewport.height = maxHeight === minHidth ? maxHeight : random(maxHeight, minHidth);
  }
  if (Object.hasOwn(viewport, 'width') && Object.hasOwn(viewport, 'height')) {
    detail.viewport = viewport;
  }
}
function loaderCommonConfigToCrawlConfig(crawlBaseConfig, advancedDetailTargetsConfig, crawlConfig) {
  // 1.detailTargets
  crawlConfig.detailTargets = advancedDetailTargetsConfig.detailTargets.map(function (rawDetail) {
    var _detail$proxy;
    // detail > advanced > app
    var detail = rawDetail;
    var url = detail.url,
      timeout = detail.timeout,
      proxy = detail.proxy,
      maxRetry = detail.maxRetry,
      priority = detail.priority,
      headers = detail.headers,
      fingerprint = detail.fingerprint;
    // 1.1.baseUrl
    if (crawlBaseConfig.baseUrl) {
      detail.url = crawlBaseConfig.baseUrl + url;
    }
    // 1.2.timeout
    if (isUndefined(timeout)) {
      if (!isUndefined(advancedDetailTargetsConfig.timeout)) {
        var _advancedDetailTarget;
        detail.timeout = (_advancedDetailTarget = advancedDetailTargetsConfig.timeout) !== null && _advancedDetailTarget !== void 0 ? _advancedDetailTarget : undefined;
      } else {
        detail.timeout = crawlBaseConfig.timeout;
      }
    }
    // 1.3.maxRetry
    if (isUndefined(maxRetry)) {
      if (!isUndefined(advancedDetailTargetsConfig.maxRetry)) {
        var _advancedDetailTarget2;
        detail.maxRetry = (_advancedDetailTarget2 = advancedDetailTargetsConfig.maxRetry) !== null && _advancedDetailTarget2 !== void 0 ? _advancedDetailTarget2 : 0;
      } else {
        detail.maxRetry = crawlBaseConfig.maxRetry;
      }
    }
    // 1.4.proxy
    if (isUndefined(proxy)) {
      if (!isUndefined(advancedDetailTargetsConfig.proxy)) {
        detail.proxy = advancedDetailTargetsConfig.proxy;
      } else if (!isUndefined(crawlBaseConfig.proxy)) {
        detail.proxy = crawlBaseConfig.proxy;
      }
    }
    // 1.5.proxyUrl & proxyDetail
    if (!isUndefined((_detail$proxy = detail.proxy) === null || _detail$proxy === void 0 ? void 0 : _detail$proxy.urls)) {
      var urls = detail.proxy.urls;
      detail.proxyUrl = urls[0];
      detail.proxyDetails = urls.map(function (url) {
        return {
          url: url,
          state: true
        };
      });
    } else {
      // 默认值
      detail.proxyDetails = [];
    }
    // 1.6.priority
    if (isUndefined(priority)) {
      detail.priority = 0;
    }
    // 1.7.header
    if (isUndefined(headers) && advancedDetailTargetsConfig.headers) {
      detail.headers = _objectSpread({}, advancedDetailTargetsConfig.headers);
    }
    // 1.8.fingerprint(公共部分)
    if (fingerprint) {
      // detaileTarget
      loaderCommonFingerprintToDetailTarget(detail, fingerprint);
    } else if (isUndefined(fingerprint) && isArray(advancedDetailTargetsConfig.fingerprints) && advancedDetailTargetsConfig.fingerprints.length) {
      // advancedConfig
      var _fingerprints = advancedDetailTargetsConfig.fingerprints;
      var selectFingerprintIndex = random(_fingerprints.length);
      var _fingerprint = _fingerprints[selectFingerprintIndex];
      // 记录每个目标选中的指纹索引
      crawlConfig.selectFingerprintIndexs.push(selectFingerprintIndex);
      loaderCommonFingerprintToDetailTarget(detail, _fingerprint);
    } else if (isUndefined(fingerprint) && !isArray(advancedDetailTargetsConfig.fingerprints) && crawlBaseConfig.enableRandomFingerprint) {
      // crawlBaseConfig
      var _fingerprint2 = fingerprints[random(fingerprints.length)];
      loaderCommonFingerprintToDetailTarget(detail, _fingerprint2);
    }
    return detail;
  });
  // 2.intervalTime
  crawlConfig.intervalTime = advancedDetailTargetsConfig.intervalTime;
  if (isUndefined(advancedDetailTargetsConfig.intervalTime) && !isUndefined(crawlBaseConfig.intervalTime)) {
    crawlConfig.intervalTime = crawlBaseConfig.intervalTime;
  }
  // 3.onCrawlItemComplete
  crawlConfig.onCrawlItemComplete = advancedDetailTargetsConfig.onCrawlItemComplete;
}
/* Create config */
/*
  每个创建配置函数的返回值都是类似于进阶配置
  不同点:
    - detailTargets 里面将存放的是详细版目标配置
    - 不会保留与详细版目标配置相同的选项

  生成 advancedConfig 对象对每个详细版目标配置进行装载, 如果是传入进阶版配置会覆盖生成的 advancedConfig 对象
*/
function createCrawlPageConfig(crawlBaseConfig, originalConfig) {
  var crawlPageConfig = {
    detailTargets: [],
    intervalTime: undefined,
    selectFingerprintIndexs: [],
    onCrawlItemComplete: undefined
  };
  var advancedDetailTargetsConfig = {
    targets: [],
    detailTargets: []
  };
  if (isObject(originalConfig) && Object.hasOwn(originalConfig, 'targets')) {
    // CrawlPageAdvancedConfig 处理
    var targets = originalConfig.targets;
    advancedDetailTargetsConfig = originalConfig;
    advancedDetailTargetsConfig.detailTargets = transformTargetToDetailTargets(targets);
  } else {
    // string | CrawlPageDetailTargetConfig | (string | CrawlPageDetailTargetConfig)[] 处理
    advancedDetailTargetsConfig.detailTargets = transformTargetToDetailTargets(originalConfig);
  }
  // 装载公共配置
  loaderCommonConfigToCrawlConfig(crawlBaseConfig, advancedDetailTargetsConfig, crawlPageConfig);
  // 装载单独配置
  crawlPageConfig.detailTargets.forEach(function (detail, index) {
    var _advancedDetailTarget3;
    // detail > advanced  > xCrawl
    var cookies = detail.cookies,
      viewport = detail.viewport,
      fingerprint = detail.fingerprint;
    // 1.cookies
    if (isUndefined(cookies) && advancedDetailTargetsConfig.cookies) {
      detail.cookies = advancedDetailTargetsConfig.cookies;
    }
    // 2.viewport
    if (isUndefined(viewport) && advancedDetailTargetsConfig.viewport) {
      detail.viewport = advancedDetailTargetsConfig.viewport;
    }
    // 3.fingerprint
    if (fingerprint) {
      loaderPageFingerprintToDetailTarget(detail, fingerprint);
    } else if (isUndefined(fingerprint) && (_advancedDetailTarget3 = advancedDetailTargetsConfig.fingerprints) !== null && _advancedDetailTarget3 !== void 0 && _advancedDetailTarget3.length) {
      // 从对应的选中记录中取出指纹索引
      var selectFingerprintIndex = crawlPageConfig.selectFingerprintIndexs[index];
      var _fingerprint3 = advancedDetailTargetsConfig.fingerprints[selectFingerprintIndex];
      loaderPageFingerprintToDetailTarget(detail, _fingerprint3);
    }
  });
  return crawlPageConfig;
}
function createCrawlHTMLConfig(crawlBaseConfig, originalConfig) {
  var crawlHTMLConfig = {
    detailTargets: [],
    intervalTime: undefined,
    selectFingerprintIndexs: [],
    onCrawlItemComplete: undefined
  };
  var advancedDetailTargetsConfig = {
    targets: [],
    detailTargets: []
  };
  if (isObject(originalConfig) && Object.hasOwn(originalConfig, 'targets')) {
    // CrawlHTMLAdvancedConfig
    var targets = originalConfig.targets;
    advancedDetailTargetsConfig = _objectSpread(_objectSpread({}, advancedDetailTargetsConfig), originalConfig);
    advancedDetailTargetsConfig.detailTargets = transformTargetToDetailTargets(targets);
  } else {
    // string | CrawlHTMLDetailTargetConfig | (string | CrawlHTMLDetailTargetConfig)[]
    advancedDetailTargetsConfig.detailTargets = transformTargetToDetailTargets(originalConfig);
  }
  loaderCommonConfigToCrawlConfig(crawlBaseConfig, advancedDetailTargetsConfig, crawlHTMLConfig);
  return crawlHTMLConfig;
}
function createCrawlDataConfig(crawlBaseConfig, originalConfig) {
  var crawlDataConfig = {
    detailTargets: [],
    intervalTime: undefined,
    selectFingerprintIndexs: [],
    onCrawlItemComplete: undefined
  };
  var advancedDetailTargetsConfig = {
    targets: [],
    detailTargets: []
  };
  if (isObject(originalConfig) && Object.hasOwn(originalConfig, 'targets')) {
    // CrawlDataAdvancedConfig 处理
    var targets = originalConfig.targets;
    advancedDetailTargetsConfig = originalConfig;
    advancedDetailTargetsConfig.detailTargets = transformTargetToDetailTargets(targets);
  } else {
    // string | CrawlDataDetailTargetConfig | (string | CrawlDataDetailTargetConfig)[] 处理
    advancedDetailTargetsConfig.detailTargets = transformTargetToDetailTargets(originalConfig);
  }
  loaderCommonConfigToCrawlConfig(crawlBaseConfig, advancedDetailTargetsConfig, crawlDataConfig);
  return crawlDataConfig;
}
function createCrawlFileConfig(crawlBaseConfig, originalConfig) {
  var _advancedDetailTarget4, _advancedDetailTarget5, _advancedDetailTarget6, _advancedDetailTarget7, _advancedDetailTarget8;
  var crawlFileConfig = {
    detailTargets: [],
    intervalTime: undefined,
    selectFingerprintIndexs: [],
    onBeforeSaveItemFile: undefined,
    onCrawlItemComplete: undefined
  };
  var advancedDetailTargetsConfig = {
    targets: [],
    detailTargets: []
  };
  if (isObject(originalConfig) && Object.hasOwn(originalConfig, 'targets')) {
    // CrawlFileAdvancedConfig 处理
    var targets = originalConfig.targets;
    advancedDetailTargetsConfig = originalConfig;
    advancedDetailTargetsConfig.detailTargets = transformTargetToDetailTargets(targets);
  } else {
    // string | CrawlFileDetailTargetConfig | (string | CrawlFileDetailTargetConfig)[] 处理
    advancedDetailTargetsConfig.detailTargets = transformTargetToDetailTargets(originalConfig);
  }
  loaderCommonConfigToCrawlConfig(crawlBaseConfig, advancedDetailTargetsConfig, crawlFileConfig);
  var advancedStoreDirInfo = {
    exist: !isUndefined((_advancedDetailTarget4 = advancedDetailTargetsConfig) === null || _advancedDetailTarget4 === void 0 ? void 0 : _advancedDetailTarget4.storeDirs),
    type: isString((_advancedDetailTarget5 = advancedDetailTargetsConfig) === null || _advancedDetailTarget5 === void 0 ? void 0 : _advancedDetailTarget5.storeDirs) ? 0 : 1
  };
  var AdvancedExtension = {
    exist: !isUndefined((_advancedDetailTarget6 = advancedDetailTargetsConfig) === null || _advancedDetailTarget6 === void 0 ? void 0 : _advancedDetailTarget6.extensions),
    type: isString((_advancedDetailTarget7 = advancedDetailTargetsConfig) === null || _advancedDetailTarget7 === void 0 ? void 0 : _advancedDetailTarget7.extensions) ? 0 : 1
  };
  var haveAdvancedFileNames = !isUndefined((_advancedDetailTarget8 = advancedDetailTargetsConfig) === null || _advancedDetailTarget8 === void 0 ? void 0 : _advancedDetailTarget8.fileNames);
  crawlFileConfig.detailTargets.forEach(function (detail, i) {
    // 1.storeDir
    if (isUndefined(detail.storeDir) && advancedStoreDirInfo.exist) {
      detail.storeDir = advancedStoreDirInfo.type === 0 ? advancedDetailTargetsConfig.storeDirs : advancedDetailTargetsConfig.storeDirs[i];
    }
    // 2.extension
    if (isUndefined(detail.extension) && AdvancedExtension.exist) {
      detail.extension = advancedStoreDirInfo.type === 0 ? advancedDetailTargetsConfig.extensions : advancedDetailTargetsConfig.extensions[i];
    }
    // 3.fileName
    if (isUndefined(detail.fileName) && haveAdvancedFileNames) {
      detail.fileName = advancedDetailTargetsConfig.fileNames[i];
    }
  });
  crawlFileConfig.onBeforeSaveItemFile = advancedDetailTargetsConfig.onBeforeSaveItemFile;
  return crawlFileConfig;
}
/* Single crawl handle */
function pageSingleCrawlHandle(_x15, _x16) {
  return _pageSingleCrawlHandle.apply(this, arguments);
}
function _pageSingleCrawlHandle() {
  _pageSingleCrawlHandle = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(device, apiConfig) {
    var _detailTargetResult$p;
    var detailTargetConfig, detailTargetResult, retryCount, maxRetry, crawlErrorQueue, browser, notAllowRetry, page, response, notError, cookies, _cookies, isStatusNormal, isSuccess;
    return _regeneratorRuntime().wrap(function _callee18$(_context18) {
      while (1) switch (_context18.prev = _context18.next) {
        case 0:
          detailTargetConfig = device.detailTargetConfig, detailTargetResult = device.detailTargetResult, retryCount = device.retryCount, maxRetry = device.maxRetry, crawlErrorQueue = device.crawlErrorQueue;
          browser = apiConfig.browser;
          notAllowRetry = retryCount === maxRetry; // 是否创建过 Page
          if (!((_detailTargetResult$p = detailTargetResult === null || detailTargetResult === void 0 ? void 0 : detailTargetResult.page) !== null && _detailTargetResult$p !== void 0)) {
            _context18.next = 7;
            break;
          }
          _context18.t0 = _detailTargetResult$p;
          _context18.next = 10;
          break;
        case 7:
          _context18.next = 9;
          return browser.newPage();
        case 9:
          _context18.t0 = _context18.sent;
        case 10:
          page = _context18.t0;
          if (!detailTargetConfig.viewport) {
            _context18.next = 14;
            break;
          }
          _context18.next = 14;
          return page.setViewport(detailTargetConfig.viewport);
        case 14:
          response = null;
          notError = true;
          _context18.prev = 16;
          if (!detailTargetConfig.proxyUrl) {
            _context18.next = 22;
            break;
          }
          _context18.next = 20;
          return browser.createBrowserContext({
            proxyServer: detailTargetConfig.proxyUrl
          });
        case 20:
          _context18.next = 24;
          break;
        case 22:
          _context18.next = 24;
          return browser.createBrowserContext({
            proxyServer: undefined
          });
        case 24:
          if (!detailTargetConfig.cookies) {
            _context18.next = 30;
            break;
          }
          cookies = parsePageCookies(detailTargetConfig.url, detailTargetConfig.cookies);
          _context18.next = 28;
          return page.setCookie.apply(page, _toConsumableArray(cookies));
        case 28:
          _context18.next = 35;
          break;
        case 30:
          _context18.next = 32;
          return page.cookies(detailTargetConfig.url);
        case 32:
          _cookies = _context18.sent;
          _context18.next = 35;
          return page.deleteCookie.apply(page, _toConsumableArray(_cookies));
        case 35:
          if (!detailTargetConfig.headers) {
            _context18.next = 38;
            break;
          }
          _context18.next = 38;
          return page.setExtraHTTPHeaders(detailTargetConfig.headers);
        case 38:
          _context18.next = 40;
          return page["goto"](detailTargetConfig.url, {
            timeout: detailTargetConfig.timeout
          });
        case 40:
          response = _context18.sent;
          _context18.next = 47;
          break;
        case 43:
          _context18.prev = 43;
          _context18.t1 = _context18["catch"](16);
          notError = false;
          crawlErrorQueue.push(_context18.t1);
        case 47:
          // 保存结果
          device.detailTargetResult = {
            response: response,
            page: page
          };
          // 处理结果
          isStatusNormal = !isCrawlStatusInHttpStatus(device);
          isSuccess = notError && isStatusNormal;
          device.isStatusNormal = isStatusNormal;
          device.isSuccess = isSuccess;
          if (isSuccess || notAllowRetry) {
            device.isHandle = true;
            pageSingleResultHandle(device, apiConfig);
          }
        case 53:
        case "end":
          return _context18.stop();
      }
    }, _callee18, null, [[16, 43]]);
  }));
  return _pageSingleCrawlHandle.apply(this, arguments);
}
function useRequestFnSingleCrawlHandle(_x17, _x18) {
  return _useRequestFnSingleCrawlHandle.apply(this, arguments);
}
/* Single result handle */
function _useRequestFnSingleCrawlHandle() {
  _useRequestFnSingleCrawlHandle = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(device, apiConfig) {
    var detailTargetConfig, crawlErrorQueue, maxRetry, retryCount, notAllowRetry, detailTargetResult, notError, isStatusNormal, isSuccess;
    return _regeneratorRuntime().wrap(function _callee19$(_context19) {
      while (1) switch (_context19.prev = _context19.next) {
        case 0:
          detailTargetConfig = device.detailTargetConfig, crawlErrorQueue = device.crawlErrorQueue, maxRetry = device.maxRetry, retryCount = device.retryCount;
          notAllowRetry = maxRetry === retryCount;
          detailTargetResult = null;
          notError = true;
          _context19.prev = 4;
          _context19.next = 7;
          return request(detailTargetConfig);
        case 7:
          detailTargetResult = _context19.sent;
          _context19.next = 14;
          break;
        case 10:
          _context19.prev = 10;
          _context19.t0 = _context19["catch"](4);
          notError = false;
          crawlErrorQueue.push(_context19.t0);
        case 14:
          // 保存结果
          device.detailTargetResult = detailTargetResult;
          // 处理结果
          isStatusNormal = !isCrawlStatusInHttpStatus(device);
          isSuccess = notError && isStatusNormal;
          device.isStatusNormal = isStatusNormal;
          device.isSuccess = isSuccess;
          if (isSuccess || notAllowRetry) {
            device.isHandle = true;
            if (apiConfig.type === 'html') {
              HTMLSingleResultHandle(device, apiConfig);
            } else if (apiConfig.type === 'data') {
              dataSingleResultHandle(device, apiConfig);
            } else if (apiConfig.type === 'file') {
              fileSingleResultHandle(device, apiConfig);
            }
          }
        case 20:
        case "end":
          return _context19.stop();
      }
    }, _callee19, null, [[4, 10]]);
  }));
  return _useRequestFnSingleCrawlHandle.apply(this, arguments);
}
var resultEssentialOtherKeys = ['isSuccess', 'retryCount'];
function handleResultEssentialOtherValue(device) {
  Object.keys(device).forEach(function (key) {
    if (resultEssentialOtherKeys.includes(key)) {
      device.result[key] = device[key];
    }
  });
}
function pageSingleResultHandle(device, infoConfig) {
  var detailTargetResult = device.detailTargetResult,
    result = device.result;
  var browser = infoConfig.browser,
    onCrawlItemComplete = infoConfig.onCrawlItemComplete;
  handleResultEssentialOtherValue(device);
  result.data = _objectSpread({
    browser: browser
  }, detailTargetResult);
  if (onCrawlItemComplete) {
    onCrawlItemComplete(device.result);
  }
}
function HTMLSingleResultHandle(device, infoConfig) {
  var isSuccess = device.isSuccess,
    detailTargetResult = device.detailTargetResult,
    result = device.result;
  var onCrawlItemComplete = infoConfig.onCrawlItemComplete;
  handleResultEssentialOtherValue(device);
  if (isSuccess && detailTargetResult) {
    var data = detailTargetResult.data,
      headers = detailTargetResult.headers,
      statusCode = detailTargetResult.statusCode;
    var html = data.toString();
    result.data = {
      statusCode: statusCode,
      headers: headers,
      html: html
    };
  }
  if (onCrawlItemComplete) {
    onCrawlItemComplete(result);
  }
}
function dataSingleResultHandle(device, infoConfig) {
  var isSuccess = device.isSuccess,
    detailTargetResult = device.detailTargetResult,
    result = device.result;
  var onCrawlItemComplete = infoConfig.onCrawlItemComplete;
  handleResultEssentialOtherValue(device);
  if (isSuccess && detailTargetResult) {
    var _detailTargetResult$h;
    var contentType = (_detailTargetResult$h = detailTargetResult.headers['content-type']) !== null && _detailTargetResult$h !== void 0 ? _detailTargetResult$h : '';
    var data = contentType.includes('application/json') ? JSON.parse(detailTargetResult.data.toString()) : contentType.includes('text') ? detailTargetResult.data.toString() : detailTargetResult.data;
    result.data = _objectSpread(_objectSpread({}, detailTargetResult), {}, {
      data: data
    });
  }
  if (onCrawlItemComplete) {
    onCrawlItemComplete(result);
  }
}
function fileSingleResultHandle(device, infoConfig) {
  var id = device.id,
    isSuccess = device.isSuccess,
    detailTargetConfig = device.detailTargetConfig,
    detailTargetResult = device.detailTargetResult,
    result = device.result;
  var saveFileErrorArr = infoConfig.saveFileErrorArr,
    saveFilePendingQueue = infoConfig.saveFilePendingQueue,
    onCrawlItemComplete = infoConfig.onCrawlItemComplete,
    onBeforeSaveItemFile = infoConfig.onBeforeSaveItemFile;
  handleResultEssentialOtherValue(device);
  if (isSuccess && detailTargetResult) {
    var _detailTargetResult$h2, _detailTargetConfig$f, _detailTargetConfig$e, _detailTargetConfig$s;
    var saveFile = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(newData) {
        var isSuccess, message, _valueOf, size;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              isSuccess = true;
              _context.prev = 1;
              _context.next = 4;
              return writeFile(filePath, newData);
            case 4:
              _context.next = 12;
              break;
            case 6:
              _context.prev = 6;
              _context.t0 = _context["catch"](1);
              isSuccess = false;
              message = "File save error at id ".concat(id, ": ").concat(_context.t0.message);
              _valueOf = function _valueOf() {
                return id;
              };
              saveFileErrorArr.push({
                message: message,
                valueOf: _valueOf
              });
            case 12:
              size = newData.length;
              result.data = _objectSpread(_objectSpread({}, detailTargetResult), {}, {
                data: {
                  isSuccess: isSuccess,
                  fileName: fileName,
                  fileExtension: fileExtension,
                  mimeType: mimeType,
                  size: size,
                  filePath: filePath
                }
              });
              if (onCrawlItemComplete) {
                onCrawlItemComplete(device.result);
              }
            case 15:
            case "end":
              return _context.stop();
          }
        }, _callee, null, [[1, 6]]);
      }));
      return function saveFile(_x19) {
        return _ref.apply(this, arguments);
      };
    }();
    var mimeType = (_detailTargetResult$h2 = detailTargetResult.headers['content-type']) !== null && _detailTargetResult$h2 !== void 0 ? _detailTargetResult$h2 : '';
    var fileName = (_detailTargetConfig$f = detailTargetConfig.fileName) !== null && _detailTargetConfig$f !== void 0 ? _detailTargetConfig$f : "".concat(id, "-").concat(new Date().getTime());
    var fileExtension = (_detailTargetConfig$e = detailTargetConfig.extension) !== null && _detailTargetConfig$e !== void 0 ? _detailTargetConfig$e : ".".concat(mimeType.split('/').pop());
    if (detailTargetConfig.storeDir && !fs.existsSync(detailTargetConfig.storeDir)) {
      fs.mkdirSync(detailTargetConfig.storeDir, {
        recursive: true
      });
    }
    var storePath = (_detailTargetConfig$s = detailTargetConfig.storeDir) !== null && _detailTargetConfig$s !== void 0 ? _detailTargetConfig$s : dirname();
    var filePath = path.resolve(storePath, fileName + fileExtension);
    // 在保存前的回调
    var data = detailTargetResult.data;
    var onBeforeSaveItemFileResult;
    if (onBeforeSaveItemFile) {
      onBeforeSaveItemFileResult = onBeforeSaveItemFile({
        id: id,
        fileName: fileName,
        filePath: filePath,
        data: data
      });
    }
    var saveFileItemPending;
    if (isPromise(onBeforeSaveItemFileResult)) {
      saveFileItemPending = onBeforeSaveItemFileResult.then(function (res) {
        return isBuffer(res) ? res : data;
      }).then(saveFile);
    } else if (isBuffer(onBeforeSaveItemFileResult)) {
      saveFileItemPending = saveFile(onBeforeSaveItemFileResult);
    } else {
      saveFileItemPending = saveFile(data);
    }
    // 存放保存文件 Promise , 后续等待即可回到 crawlFile 函数内部等待完成即可
    saveFilePendingQueue.push(saveFileItemPending);
  } else {
    if (onCrawlItemComplete) {
      onCrawlItemComplete(device.result);
    }
  }
}
/* Create crawl API */
function createCrawlPage(crawlBaseConfig) {
  var xId = crawlBaseConfig.id,
    mode = crawlBaseConfig.mode,
    logConfig = crawlBaseConfig.logOptions,
    crawlPageOptions = crawlBaseConfig.crawlPage;
  var id = 0;
  var browser = null;
  var createBrowserPending = null;
  var haveCreateBrowser = false;
  var type = 'page';
  function crawlPage(_x20) {
    return _crawlPage.apply(this, arguments);
  }
  function _crawlPage() {
    _crawlPage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(config) {
      var _createCrawlPageConfi, detailTargets, intervalTime, onCrawlItemComplete, infoConfig, crawlResultArr, crawlResult;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            //  创建浏览器
            if (!haveCreateBrowser) {
              haveCreateBrowser = true;
              createBrowserPending = puppeteer.launch(crawlPageOptions === null || crawlPageOptions === void 0 ? void 0 : crawlPageOptions.puppeteerLaunchOptions).then(function (result) {
                browser = result;
              });
            }
            // 等待浏览器创建完毕
            if (!createBrowserPending) {
              _context2.next = 5;
              break;
            }
            _context2.next = 4;
            return createBrowserPending;
          case 4:
            // 防止对 createBrowserPending 重复赋值
            if (createBrowserPending) createBrowserPending = null;
          case 5:
            // 创建新配置
            _createCrawlPageConfi = createCrawlPageConfig(crawlBaseConfig, config), detailTargets = _createCrawlPageConfi.detailTargets, intervalTime = _createCrawlPageConfi.intervalTime, onCrawlItemComplete = _createCrawlPageConfi.onCrawlItemComplete;
            infoConfig = {
              serialNumber: "".concat(xId, "-").concat(type, "-").concat(++id),
              mode: mode,
              type: type,
              logConfig: logConfig,
              intervalTime: intervalTime,
              browser: browser,
              onCrawlItemComplete: onCrawlItemComplete
            };
            _context2.next = 9;
            return controller(detailTargets, infoConfig, pageSingleCrawlHandle);
          case 9:
            crawlResultArr = _context2.sent;
            crawlResult = isArray(config) || isObject(config) && Object.hasOwn(config, 'targets') ? crawlResultArr : crawlResultArr[0];
            return _context2.abrupt("return", crawlResult);
          case 12:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }));
    return _crawlPage.apply(this, arguments);
  }
  return crawlPage;
}
function createCrawlHTML(crawlBaseConfig) {
  var xId = crawlBaseConfig.id,
    mode = crawlBaseConfig.mode,
    logConfig = crawlBaseConfig.logOptions;
  var id = 0;
  var type = 'html';
  function crawlHTML(_x21) {
    return _crawlHTML.apply(this, arguments);
  }
  function _crawlHTML() {
    _crawlHTML = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(config) {
      var _createCrawlHTMLConfi, detailTargets, intervalTime, onCrawlItemComplete, infoConfig, crawlResultArr, crawlResult;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            _createCrawlHTMLConfi = createCrawlHTMLConfig(crawlBaseConfig, config), detailTargets = _createCrawlHTMLConfi.detailTargets, intervalTime = _createCrawlHTMLConfi.intervalTime, onCrawlItemComplete = _createCrawlHTMLConfi.onCrawlItemComplete;
            infoConfig = {
              serialNumber: "".concat(xId, "-").concat(type, "-").concat(++id),
              mode: mode,
              type: type,
              logConfig: logConfig,
              intervalTime: intervalTime,
              onCrawlItemComplete: onCrawlItemComplete
            };
            _context3.next = 4;
            return controller(detailTargets, infoConfig, useRequestFnSingleCrawlHandle);
          case 4:
            crawlResultArr = _context3.sent;
            crawlResult = isArray(config) || isObject(config) && Object.hasOwn(config, 'targets') ? crawlResultArr : crawlResultArr[0];
            return _context3.abrupt("return", crawlResult);
          case 7:
          case "end":
            return _context3.stop();
        }
      }, _callee3);
    }));
    return _crawlHTML.apply(this, arguments);
  }
  return crawlHTML;
}
function createCrawlData(crawlBaseConfig) {
  var xId = crawlBaseConfig.id,
    mode = crawlBaseConfig.mode,
    logConfig = crawlBaseConfig.logOptions;
  var id = 0;
  var type = 'data';
  function crawlData(_x22) {
    return _crawlData.apply(this, arguments);
  }
  function _crawlData() {
    _crawlData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(config) {
      var _createCrawlDataConfi, detailTargets, intervalTime, onCrawlItemComplete, infoConfig, crawlResultArr, crawlResult;
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            _createCrawlDataConfi = createCrawlDataConfig(crawlBaseConfig, config), detailTargets = _createCrawlDataConfi.detailTargets, intervalTime = _createCrawlDataConfi.intervalTime, onCrawlItemComplete = _createCrawlDataConfi.onCrawlItemComplete;
            infoConfig = {
              serialNumber: "".concat(xId, "-").concat(type, "-").concat(++id),
              mode: mode,
              type: type,
              logConfig: logConfig,
              intervalTime: intervalTime,
              onCrawlItemComplete: onCrawlItemComplete
            };
            _context4.next = 4;
            return controller(detailTargets, infoConfig, useRequestFnSingleCrawlHandle);
          case 4:
            crawlResultArr = _context4.sent;
            crawlResult = isArray(config) || isObject(config) && Object.hasOwn(config, 'targets') ? crawlResultArr : crawlResultArr[0];
            return _context4.abrupt("return", crawlResult);
          case 7:
          case "end":
            return _context4.stop();
        }
      }, _callee4);
    }));
    return _crawlData.apply(this, arguments);
  }
  return crawlData;
}
function createCrawlFile(crawlBaseConfig) {
  var xId = crawlBaseConfig.id,
    mode = crawlBaseConfig.mode,
    logConfig = crawlBaseConfig.logOptions;
  var id = 0;
  var type = 'file';
  function crawlFile(_x23) {
    return _crawlFile.apply(this, arguments);
  }
  function _crawlFile() {
    _crawlFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(config) {
      var _createCrawlFileConfi, detailTargets, intervalTime, onBeforeSaveItemFile, onCrawlItemComplete, infoConfig, crawlResultArr, saveFilePendingQueue, saveFileErrorArr, succssIds, errorIds, crawlResult;
      return _regeneratorRuntime().wrap(function _callee5$(_context5) {
        while (1) switch (_context5.prev = _context5.next) {
          case 0:
            _createCrawlFileConfi = createCrawlFileConfig(crawlBaseConfig, config), detailTargets = _createCrawlFileConfi.detailTargets, intervalTime = _createCrawlFileConfi.intervalTime, onBeforeSaveItemFile = _createCrawlFileConfi.onBeforeSaveItemFile, onCrawlItemComplete = _createCrawlFileConfi.onCrawlItemComplete;
            infoConfig = {
              serialNumber: "".concat(xId, "-").concat(type, "-").concat(++id),
              mode: mode,
              type: type,
              logConfig: logConfig,
              intervalTime: intervalTime,
              saveFileErrorArr: [],
              saveFilePendingQueue: [],
              onCrawlItemComplete: onCrawlItemComplete,
              onBeforeSaveItemFile: onBeforeSaveItemFile
            };
            _context5.next = 4;
            return controller(detailTargets, infoConfig, useRequestFnSingleCrawlHandle);
          case 4:
            crawlResultArr = _context5.sent;
            saveFilePendingQueue = infoConfig.saveFilePendingQueue, saveFileErrorArr = infoConfig.saveFileErrorArr; // 等待保存文件完成
            _context5.next = 8;
            return Promise.all(saveFilePendingQueue);
          case 8:
            if (logConfig.result) {
              // 打印保存错误
              mergeSort(saveFileErrorArr).forEach(function (item) {
                return log("".concat(infoConfig.serialNumber, " | ").concat(logError(item.message)));
              });
              // 统计保存
              succssIds = [];
              errorIds = [];
              crawlResultArr.forEach(function (item) {
                var _item$data;
                if ((_item$data = item.data) !== null && _item$data !== void 0 && _item$data.data.isSuccess) {
                  succssIds.push(item.id);
                } else {
                  errorIds.push(item.id);
                }
              });
              log("".concat(whiteBold(infoConfig.serialNumber), " | ").concat(logStatistics('Save finish:'), "\n             ").concat(logSuccess("Success - total: ".concat(succssIds.length, ", targets id: [ ").concat(succssIds.join(', '), " ]")), "\n               ").concat(logError("Error - total: ".concat(errorIds.length, ", targets id: [ ").concat(errorIds.join(', '), " ]")), "\n        "));
            }
            crawlResult = isArray(config) || isObject(config) && Object.hasOwn(config, 'targets') ? crawlResultArr : crawlResultArr[0];
            return _context5.abrupt("return", crawlResult);
          case 11:
          case "end":
            return _context5.stop();
        }
      }, _callee5);
    }));
    return _crawlFile.apply(this, arguments);
  }
  return crawlFile;
}
var id = 0;
function createBaseConfig(config) {
  var mode = config.mode,
    enableRandomFingerprint = config.enableRandomFingerprint,
    baseUrl = config.baseUrl,
    intervalTime = config.intervalTime,
    log = config.log,
    crawlPage = config.crawlPage,
    timeout = config.timeout,
    proxy = config.proxy,
    maxRetry = config.maxRetry;
  var crawlBaseConfig = {
    id: ++id,
    mode: mode !== null && mode !== void 0 ? mode : 'async',
    enableRandomFingerprint: enableRandomFingerprint !== null && enableRandomFingerprint !== void 0 ? enableRandomFingerprint : false,
    timeout: timeout !== null && timeout !== void 0 ? timeout : 10000,
    maxRetry: maxRetry !== null && maxRetry !== void 0 ? maxRetry : 0,
    logOptions: {
      start: true,
      process: true,
      result: true
    },
    baseUrl: baseUrl,
    intervalTime: intervalTime,
    proxy: proxy,
    crawlPage: crawlPage
  };
  // logOptions
  if (isObject(log)) {
    crawlBaseConfig.logOptions = _objectSpread(_objectSpread({}, crawlBaseConfig.logOptions), log);
  } else if (isBoolean(log) && !log) {
    var keys = Object.keys(crawlBaseConfig.logOptions);
    keys.forEach(function (key) {
      return crawlBaseConfig.logOptions[key] = false;
    });
  }
  return crawlBaseConfig;
}
function createnApp(crawlBaseConfig) {
  var app = {
    crawlPage: createCrawlPage(crawlBaseConfig),
    crawlHTML: createCrawlHTML(crawlBaseConfig),
    crawlData: createCrawlData(crawlBaseConfig),
    crawlFile: createCrawlFile(crawlBaseConfig)
  };
  return app;
}
function createCrawl() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var crawlBaseConfig = createBaseConfig(config);
  var app = createnApp(crawlBaseConfig);
  return app;
}
var BACKGROUND = "\u4F60\u73B0\u5728\u662F\u4E00\u540D\u722C\u866B\u4E13\u5BB6\u548C\u524D\u7AEF\u4E13\u5BB6, html \u4F1A\u5C06\u4E00\u6BB5 HTML \u7247\u6BB5\u53D1\u9001\u7ED9\u4F60, \u4F60\u9700\u8981\u5C06\u8BE5\u6BB5 HTML \u8FDB\u884C\u89E3\u6790, \u7136\u540E\u5206\u6790 me \u6240\u63D0\u4F9B\u7684\u4FE1\u606F\u5E2E\u52A9\u4ED6\u627E\u51FA\u6240\u9700\u7684\u5185\u5BB9, \u5E76\u8FD4\u56DE\u5982\u4E0B\u6240\u8BF4\u7684 JSON \u5BF9\u8C61\u683C\u5F0F\u3002\n\nhtml: HTML string\n\u6211\u4EEC\u9700\u8981\u904D\u5386 HTML \u7247\u6BB5\u5E76\u68C0\u67E5\u6BCF\u4E2A\u5143\u7D20\u7684\u5185\u5BB9, \u4ECE\u800C\u786E\u5B9A\u54EA\u4E9B\u9879\u662F me \u6240\u9700\u7684\u3002\u7136\u540E, \u6211\u4EEC\u53EF\u4EE5\u6839\u636E\u8FD9\u4E9B\u5143\u7D20\u5728DOM\u6811\u4E2D\u7684\u4F4D\u7F6E\u6765\u7ED3\u679C\u3002\n";
var PARSE_ELEMENTS_CONTEXT = "\n".concat(BACKGROUND, "\n\nme: { message: string }\n\u53D1\u6765\u4E86\u4E00\u4E2A JavaScript \u5BF9\u8C61\u8F6C\u6362\u4E3A JSON \u5B57\u7B26\u4E32\u7684\u503C\u3002\n- message:\n  - \u7C7B\u578B: string,\n  - \u4F5C\u7528: \u7684\u9700\u6C42\u3002\n\n\u8FD4\u56DE\u503C: { elements: {key: value}[], type: string }\n\u9700\u8981\u8FD4\u56DE\u8FD9\u6837\u4E00\u4E2A JSON \u5BF9\u8C61\u683C\u5F0F\u3002\n- elements:\n  - \u7C7B\u578B: array, \u91CC\u9762\u5B58\u653E\u5BF9\u8C61 {key: value} key \u662F\u5C5E\u6027\u540D, value \u662F\u5C5E\u6027\u503C\n  - \u4F5C\u7528: \u6570\u7EC4\u91CC\u7684\u6BCF\u4E00\u4E2A\u5BF9\u8C61\u5BF9\u5E94\u8FD9\u4E00\u4E2A\u5143\u7D20\u7684\u5C5E\u6027\u3002\n- type:\n  - \u7C7B\u578B: string, \u5206\u522B\u4E3A \"single\" | \"multiple\" | \"none\"\n  - \u4F5C\u7528: \"single\" \u8BF4\u660E\u5F53\u524D HTML \u7247\u6BB5\u53EA\u627E\u5230\u4E00\u4E2A\u76EE\u6807\u5143\u7D20, \"multiple\" \u8BF4\u660E\u5F53\u524D HTML \u7247\u6BB5\u627E\u5230\u591A\u4E2A\u76EE\u6807\u5143\u7D20, \"none\" \u6CA1\u6709\u5728\u5F53\u524D HTML \u7247\u6BB5\u627E\u5230\u3002\n\n\n\u4F60\u9700\u8981\u6839\u636EHTML\u7ED3\u6784\u9009\u62E9\u5408\u9002\u7684\u5C5E\u6027:\n1.\u89E3\u6790\u548C\u7406\u89E3message\n  - \u89E3\u6790JSON\u5B57\u7B26\u4E32: \u9700\u8981\u89E3\u6790me\u53D1\u9001\u7684JSON\u5B57\u7B26\u4E32\uFF0C\u4ECE\u4E2D\u63D0\u53D6\u51FAmessage\u5B57\u6BB5\u3002\n  - \u81EA\u7136\u8BED\u8A00\u5904\u7406\uFF1A\u5229\u7528\u81EA\u7136\u8BED\u8A00\u5904\u7406\u6280\u672F\u5BF9message\u5B57\u6BB5\u8FDB\u884C\u5206\u6790\uFF0C\u4EE5\u8BC6\u522B\u51FA\u5E0C\u671B\u9009\u62E9\u7684\u5143\u7D20\u7C7B\u578B\uFF08\u5982div\u3001span\u7B49\uFF09\u3001\u7279\u5F81\uFF08\u5982\u7C7B\u540D\u3001ID\u3001\u5C5E\u6027\u7B49\uFF09\uFF0C\u4EE5\u53CA\u5176\u4ED6\u53EF\u80FD\u7684\u7B5B\u9009\u6761\u4EF6\u6216\u8981\u6C42\u3002\n  - \u9700\u6C42\u8F6C\u6362\uFF1A\u57FA\u4E8E\u81EA\u7136\u8BED\u8A00\u5904\u7406\u7684\u7ED3\u679C\uFF0C\u5C06\u7684\u9700\u6C42\u8F6C\u6362\u4E3A\u4E00\u7EC4\u53EF\u7528\u4E8E\u67E5\u8BE2DOM\u6811\u7684CSS\u9009\u62E9\u5668\u6216XPath\u8868\u8FBE\u5F0F\u3002\n2.\u89E3\u6790HTML\u7247\u6BB5\n  - HTML\u89E3\u6790\uFF1AAI\u4F7F\u7528HTML\u89E3\u6790\u5668\u5C06me\u63D0\u4F9B\u7684HTML\u7247\u6BB5\u8F6C\u6362\u4E3A\u4E00\u4E2ADOM\u6811\u7ED3\u6784\u3002DOM\u6811\u662F\u4E00\u4E2A\u6811\u5F62\u6570\u636E\u7ED3\u6784\uFF0C\u5B83\u8868\u793A\u4E86HTML\u6587\u6863\u7684\u7ED3\u6784\uFF0C\u4F7F\u5F97AI\u80FD\u591F\u65B9\u4FBF\u5730\u904D\u5386\u548C\u67E5\u8BE2\u5143\u7D20\u3002\n  - \u6784\u5EFADOM\u6811\uFF1A\u89E3\u6790\u5668\u5C06HTML\u7247\u6BB5\u4E2D\u7684\u6807\u7B7E\u3001\u5C5E\u6027\u548C\u6587\u672C\u8F6C\u6362\u4E3ADOM\u8282\u70B9\uFF0C\u5E76\u5EFA\u7ACB\u8D77\u5B83\u4EEC\u4E4B\u95F4\u7684\u7236\u5B50\u5173\u7CFB\uFF0C\u5F62\u6210\u4E00\u4E2A\u5B8C\u6574\u7684DOM\u6811\u3002\n3.\u9009\u62E9\u5143\u7D20\u5E76\u63D0\u53D6\u5C5E\u6027\n  - \u5143\u7D20\u9009\u62E9\uFF1AAI\u4F7F\u7528\u5728\u6B65\u9AA4\u4E00\u4E2D\u751F\u6210\u7684CSS\u9009\u62E9\u5668\u6216XPath\u8868\u8FBE\u5F0F\u5728DOM\u6811\u4E2D\u8FDB\u884C\u5143\u7D20\u9009\u62E9\u3002\u8FD9\u5C06\u8FD4\u56DE\u4E00\u4E2A\u6216\u591A\u4E2A\u5339\u914D\u7684\u5143\u7D20\u8282\u70B9\u3002\n  - \u5C5E\u6027\u63D0\u53D6\uFF1A\u5BF9\u4E8E\u6BCF\u4E2A\u5339\u914D\u7684\u5143\u7D20\u8282\u70B9\uFF0CAI\u5C06\u63D0\u53D6\u6307\u5B9A\u7684\u5C5E\u6027\u3002\u8FD9\u53EF\u4EE5\u901A\u8FC7\u8BBF\u95EEDOM\u8282\u70B9\u7684\u5C5E\u6027\u96C6\u5408\u6765\u5B8C\u6210\u3002AI\u9700\u8981\u786E\u4FDD\u63D0\u53D6\u7684\u5C5E\u6027\u540D\u79F0\u4E0E\u5728message\u5B57\u6BB5\u4E2D\u6307\u5B9A\u7684\u76F8\u5339\u914D\u3002\n  - \u6784\u5EFA\u5C5E\u6027\u5BF9\u8C61\uFF1A\u5BF9\u4E8E\u6BCF\u4E2A\u5143\u7D20\u7684\u6BCF\u4E2A\u5C5E\u6027\uFF0CAI\u5C06\u521B\u5EFA\u4E00\u4E2A\u5305\u542Bkey\uFF08\u5C5E\u6027\u540D\uFF09\u548Cvalue\uFF08\u5C5E\u6027\u503C\uFF09\u7684\u5BF9\u8C61\uFF0C\u5E76\u5C06\u8FD9\u4E9B\u5BF9\u8C61\u6DFB\u52A0\u5230elements\u6570\u7EC4\u4E2D\u3002\n4.\u786E\u5B9A\u5E76\u8FD4\u56DEtype\u5B57\u6BB5\n  - \u5143\u7D20\u8BA1\u6570\uFF1AAI\u5C06\u7EDF\u8BA1\u627E\u5230\u7684\u5339\u914D\u5143\u7D20\u7684\u6570\u91CF\u3002\u8FD9\u4E2A\u6570\u91CF\u5C06\u51B3\u5B9A\u8FD4\u56DE\u7684type\u5B57\u6BB5\u7684\u503C\u3002\n  - \u8BBE\u7F6Etype\u5B57\u6BB5\uFF1A\n    - \u5982\u679C\u627E\u5230\u7684\u5143\u7D20\u6570\u91CF\u4E3A1\uFF0Ctype\u5B57\u6BB5\u8BBE\u7F6E\u4E3A\"single\"\u3002\n    - \u5982\u679C\u627E\u5230\u7684\u5143\u7D20\u6570\u91CF\u5927\u4E8E1\uFF0Ctype\u5B57\u6BB5\u8BBE\u7F6E\u4E3A\"multiple\"\u3002\n    - \u5982\u679C\u6CA1\u6709\u627E\u5230\u4EFB\u4F55\u5143\u7D20\uFF0Ctype\u5B57\u6BB5\u8BBE\u7F6E\u4E3A\"none\"\n5.\u8FD4\u56DE\u7ED3\u679C\n  - \u6784\u5EFA\u8FD4\u56DE\u5BF9\u8C61\uFF1A\u5C06elements\u6570\u7EC4\u548Ctype\u5B57\u6BB5\u7EC4\u5408\u6210\u4E00\u4E2AJSON\u5BF9\u8C61\u3002\n");
var GET_ELEMENT_SELECTORS_CONTEXT = "\n".concat(BACKGROUND, "\n\nme: { message: string, pathMode: string }\n\u53D1\u6765\u4E86\u4E00\u4E2A JavaScript \u5BF9\u8C61\u8F6C\u6362\u4E3A JSON \u5B57\u7B26\u4E32\u7684\u503C\u3002\n- message:\n  - \u7C7B\u578B: string,\n  - \u4F5C\u7528: me \u7684\u9700\u6C42\u3002\n- pathMode:\n  - \u7C7B\u578B: string, default \u6216\u8005 strict\n  - \u4F5C\u7528: default \u5219\u53EF\u4EE5\u4E0D\u4ECE HTML \u7247\u6BB5\u7684\u6839\u90E8\u5F00\u59CB\u7684 selectors , \u4E3A strict \u5219\u8BF4\u660E\u5FC5\u9700\u4ECE HTML \u7247\u6BB5\u7684\u6839\u90E8\u5F00\u59CB\u7684 selectors \u3002\n\n\u8FD4\u56DE\u503C: { selectors: string, type: string }\n\u9700\u8981\u8FD4\u56DE\u8FD9\u6837\u4E00\u4E2A JSON \u5BF9\u8C61\u683C\u5F0F\u3002\n- selectors:\n  - \u7C7B\u578B: string\n  - \u4F5C\u7528: \u8868\u793A\u5143\u7D20\u9009\u62E9\u5668, \u540E\u7EED\u53EF\u80FD\u88AB\u7528\u4E8E document.querySelector \u83B7\u53D6\u5230\u5143\u7D20\u3002\n- type:\n  - \u7C7B\u578B: string, \u5206\u522B\u4E3A \"single\" | \"multiple\" | \"none\"\n  - \u4F5C\u7528: \"single\" \u8BF4\u660E\u5F53\u524D HTML \u7247\u6BB5\u53EA\u627E\u5230\u4E00\u4E2A\u76EE\u6807, \"multiple\" \u8BF4\u660E\u5F53\u524D HTML \u7247\u6BB5\u627E\u5230\u591A\u4E2A\u76EE\u6807, \"none\" \u6CA1\u6709\u5728\u5F53\u524D HTML \u7247\u6BB5\u627E\u5230\u3002\n\n\n\u4F60\u9700\u8981\u6839\u636EHTML\u7ED3\u6784\u9009\u62E9\u5408\u9002\u7684\u9009\u62E9\u5668:\n1.\u89E3\u6790\u548C\u7406\u89E3message\u4E0EpathMode\n  - \u89E3\u6790message: \u4ECE me \u53D1\u9001\u7684JSON\u5B57\u7B26\u4E32\u4E2D\u63D0\u53D6message\u5B57\u6BB5, \u5E76\u8FDB\u884C\u81EA\u7136\u8BED\u8A00\u5904\u7406, \u8BC6\u522B\u51FA\u5E0C\u671B\u9009\u62E9\u7684\u5143\u7D20\u7C7B\u578B\u3001\u7279\u5F81\u6216\u5176\u4ED6\u8981\u6C42\u3002\n  - \u89E3\u6790pathMode: \u63D0\u53D6pathMode\u5B57\u6BB5\u7684\u503C, \u5E76\u5224\u65AD\u662Fdefault\u8FD8\u662Fstrict\u3002\u8FD9\u5C06\u51B3\u5B9A\u9009\u62E9\u5668\u662F\u5426\u5FC5\u987B\u4ECEHTML\u7247\u6BB5\u7684\u6839\u90E8\u5F00\u59CB\u3002\n2.\u89E3\u6790HTML\u7247\u6BB5\n  - \u6784\u5EFADOM\u6811: \u5C06\u63D0\u4F9B\u7684HTML\u7247\u6BB5\u89E3\u6790\u4E3ADOM\u6811, \u4EE5\u4FBF\u4F60\u8FDB\u884C\u5143\u7D20\u9009\u62E9\u548C\u904D\u5386\u3002\n3.\u6784\u5EFA\u9009\u62E9\u5668:\n  - \u6839\u636Emessage\u4E2D\u7684\u8981\u6C42, \u7ED3\u5408\u4ECEHTML\u7247\u6BB5\u4E2D\u63D0\u53D6\u7684\u5143\u7D20\u7279\u5F81\uFF08\u5982\u7C7B\u540D\u3001ID\u3001\u5C5E\u6027\u7B49\uFF09, \u6784\u5EFA\u5408\u9002\u7684\u9009\u62E9\u5668\u3002\n  - \u5982\u679CpathMode\u4E3Astrict, \u786E\u4FDD\u9009\u62E9\u5668\u7684\u8DEF\u5F84\u4ECE\u6839\u90E8\u5143\u7D20\u5F00\u59CB, \u5E76\u7CBE\u786E\u6307\u5411\u76EE\u6807\u5143\u7D20\u3002\n  - \u5982\u679CpathMode\u4E3Adefault, \u5219\u53EF\u4EE5\u6839\u636E\u9700\u8981\u9009\u62E9\u4ECE\u4EFB\u4F55\u7EA7\u522B\u7684\u5143\u7D20\u5F00\u59CB\u7684\u9009\u62E9\u5668\u3002\n4.\u4F7F\u7528CSS\u9009\u62E9\u5668:\n  - CSS\u9009\u62E9\u5668\u6709\u5F88\u591A\u79CD\u7C7B, \u5305\u62EC\u7C7B\u578B\u9009\u62E9\u5668\u3001\u7C7B\u9009\u62E9\u5668\u3001ID\u9009\u62E9\u5668\u3001\u5C5E\u6027\u9009\u62E9\u5668\u548C\u4F2A\u7C7B\u9009\u62E9\u5668\u7B49\u3002\n  - \u6839\u636E\u76EE\u6807\u5143\u7D20\u7684\u7279\u5F81, \u9009\u62E9\u5408\u9002\u7684\u9009\u62E9\u5668\u7C7B\u578B\u3002\u4F8B\u5982, \u5982\u679C\u5143\u7D20\u6709\u4E00\u4E2A\u72EC\u7279\u7684\u7C7B\u540D, \u60A8\u53EF\u4EE5\u4F7F\u7528.\u7C7B\u540D\u4F5C\u4E3A\u9009\u62E9\u5668\u3002\n5.\u9009\u62E9\u6700\u5408\u9002\u7684\u9009\u62E9\u5668\u7C7B\u578B:\n  - \u5982\u679C\u5143\u7D20\u6709\u552F\u4E00\u7684ID, \u4F7F\u7528ID\u9009\u62E9\u5668\u3002\n  - \u5982\u679C\u5143\u7D20\u5C5E\u4E8E\u67D0\u4E2A\u7279\u5B9A\u7684\u7C7B, \u4F7F\u7528\u7C7B\u9009\u62E9\u5668\u3002\n  - \u5982\u679C\u5143\u7D20\u662F\u552F\u4E00\u7684\u6807\u7B7E\u7C7B\u578B, \u8003\u8651\u4F7F\u7528\u5143\u7D20\u9009\u62E9\u5668\u3002\n  - \u5982\u679C\u5143\u7D20\u6709\u7279\u5B9A\u7684\u5C5E\u6027\u6216\u5C5E\u6027\u503C, \u53EF\u4EE5\u4F7F\u7528\u5C5E\u6027\u9009\u62E9\u5668\u3002\n6.\u68C0\u67E5\u5143\u7D20\u7684\u552F\u4E00\u6027:\n  - \u5982\u679C\u76EE\u6807\u5143\u7D20\u5728\u9875\u9762\u4E2D\u53EA\u6709\u4E00\u4E2A, \u90A3\u4E48\u60A8\u53EF\u4EE5\u4F7F\u7528\u5B83\u7684ID\u3001\u7279\u5B9A\u7684\u7C7B\u540D\u6216\u6807\u7B7E\u540D\u4F5C\u4E3A\u9009\u62E9\u5668\u3002\n  - \u5982\u679C\u76EE\u6807\u5143\u7D20\u6709\u591A\u4E2A, \u60A8\u9700\u8981\u627E\u5230\u4E00\u79CD\u65B9\u6CD5\u6765\u533A\u5206\u5B83\u4EEC\u3002\u8FD9\u53EF\u4EE5\u662F\u901A\u8FC7\u5B83\u4EEC\u7684\u987A\u5E8F\uFF08\u4F7F\u7528:nth-child()\u6216:nth-of-type()\uFF09\u3001\u7279\u5B9A\u7684\u5C5E\u6027\u6216\u5B83\u4EEC\u7684\u7236\u5143\u7D20\u3002\n7.\u8003\u8651\u5143\u7D20\u7684\u4E0A\u4E0B\u6587:\n  - \u6709\u65F6, \u5355\u72EC\u7684\u5143\u7D20\u9009\u62E9\u5668\u53EF\u80FD\u4E0D\u591F\u7CBE\u786E\u3002\u5728\u8FD9\u79CD\u60C5\u51B5\u4E0B, \u60A8\u53EF\u4EE5\u4F7F\u7528\u540E\u4EE3\u9009\u62E9\u5668\uFF08\u7A7A\u683C\uFF09\u3001\u5B50\u5143\u7D20\u9009\u62E9\u5668\uFF08>\uFF09\u6216\u76F8\u90BB\u5144\u5F1F\u9009\u62E9\u5668\uFF08+\uFF09\u6765\u7ED3\u5408\u5143\u7D20\u7684\u7236\u5143\u7D20\u6216\u5144\u5F1F\u5143\u7D20\u3002\n\u8BB0\u4F4F, \u9009\u62E9\u5668\u7684\u9009\u62E9\u5E94\u8BE5\u5C3D\u53EF\u80FD\u7CBE\u786E\u548C\u5177\u4F53, \u4EE5\u907F\u514D\u9009\u62E9\u5230\u4E0D\u9700\u8981\u7684\u5143\u7D20\u3002\n8.\u5904\u7406\u7279\u6B8A\u60C5\u51B5:\n  - \u5982\u679C\u76EE\u6807\u5143\u7D20\u6CA1\u6709\u72EC\u7279\u7684\u6807\u8BC6\u7B26, \u53EF\u80FD\u9700\u8981\u4F7F\u7528\u66F4\u590D\u6742\u7684\u7EC4\u5408\u9009\u62E9\u5668\u6216\u4F2A\u7C7B\u9009\u62E9\u5668\u3002\n\u6CE8\u610F\u5904\u7406\u5177\u6709\u76F8\u540C\u7C7B\u540D\u6216\u6807\u7B7E\u540D\u7684\u591A\u4E2A\u5143\u7D20, \u786E\u4FDD\u9009\u62E9\u5668\u80FD\u591F\u533A\u5206\u5B83\u4EEC\u3002\n9.\u8FD4\u56DE\u7ED3\u679C:\n  - \u786E\u4FDD\u9009\u62E9\u5668\u517C\u5BB9\u6027: \u5728\u8FD4\u56DE\u9009\u62E9\u5668\u4E4B\u524D, \u5FC5\u9700\u662F\u5339\u914D\u7684\u9009\u62E9\u5668\u7684 DOM \u5B57\u7B26\u4E32DOMString\u3002\u8BE5\u5B57\u7B26\u4E32\u5FC5\u987B\u662F\u6709\u6548\u7684 CSS \u9009\u62E9\u5668\u5B57\u7B26\u4E32, \u5E76\u4E14\u80FD\u591F\u5728document.querySelectorAll(selectors)\u4E2D\u4F7F\u7528\u3002\n  - \u786E\u5B9Atype\u5B57\u6BB5: \u6839\u636E\u627E\u5230\u7684\u5143\u7D20\u6570\u91CF, \u8BBE\u7F6Etype\u5B57\u6BB5\u4E3Asingle\uFF08\u627E\u5230\u4E00\u4E2A\u5143\u7D20\uFF09\u3001multiple\uFF08\u627E\u5230\u591A\u4E2A\u5143\u7D20\uFF09\u6216none\uFF08\u672A\u627E\u5230\u5143\u7D20\uFF09\u3002\n\n\n# \u793A\u4F8B\n\n## \u793A\u4F8B\uFF08\u627E\u4E0D\u5230\u7684\u60C5\u51B5\uFF09\n\nhtml: \"\n  <div class=\"list-item\">\u5B89\u5353\u5145\u7535\u7EBF</div>\n  <div class=\"list-item\">\u82F9\u679C\u5145\u7535\u7EBF</div>\n\"\n\nme: { \"message\": \"\u83B7\u53D6 TYPE-C \u5145\u7535\u7EBF\u3002\", \"isFullPath\": false }\n\n\u8FD4\u56DE\u503C: { \"selectors\": \"\", \"type\": \"none\"}\n\n\u5206\u6790: \u8FD9\u91CC\u6CA1\u6709 TYPE-C \u7C7B\u578B\u7684\u5145\u7535\u7EBF, \u53EA\u80FD\u5C06 isExist \u8BBE\u4E3A false , selectors \u8BBE\u4E3A \"\"\u3002\n");
var HELP_CONTEXT = "\u6211\u73B0\u5728\u6709\u4E00\u4E2A\u722C\u866B\u76F8\u5173\u7684\u95EE\u9898\u9700\u8981\u8BF7\u6559\u4F60\u3002\u4F5C\u4E3A\u722C\u866B\u4E13\u5BB6\u548C\u524D\u7AEF\u4E13\u5BB6\uFF0C\u9700\u8981\u80FD\u5E2E\u6211\u89E3\u7B54\u4E00\u4E0B, \u53EA\u9700\u56DE\u7B54me\u7684\u95EE\u9898\u3002\n\nx-crawl \u662F\u4E00\u4E2A\u7075\u6D3B\u7684 Node.js AI \u8F85\u52A9\u722C\u866B\u5E93\u3002\u5F3A\u5927\u7684 AI \u8F85\u52A9\u529F\u80FD\uFF0C\u4F7F\u722C\u866B\u5DE5\u4F5C\u53D8\u5F97\u66F4\u52A0\u9AD8\u6548\u3001\u667A\u80FD\u548C\u4FBF\u6377\u3002\nx-crawl GitHub: https://github.com/me-hxl/x-craw\n";
function createCrawlOpenAI() {
  var _defaultModel$chatMod;
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var defaultModel = config.defaultModel,
    clientOptions = config.clientOptions;
  var openai = new OpenAI(clientOptions);
  var chatDefaultModel = (_defaultModel$chatMod = defaultModel === null || defaultModel === void 0 ? void 0 : defaultModel.chatModel) !== null && _defaultModel$chatMod !== void 0 ? _defaultModel$chatMod : 'gpt-3.5-turbo';
  function runChat(_x24) {
    return _runChat.apply(this, arguments);
  }
  function _runChat() {
    _runChat = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(option) {
      var _option$model, model, context, HTMLContent, userContent, responseFormatType, spinner, completion, content, result;
      return _regeneratorRuntime().wrap(function _callee9$(_context9) {
        while (1) switch (_context9.prev = _context9.next) {
          case 0:
            _option$model = option.model, model = _option$model === void 0 ? chatDefaultModel : _option$model, context = option.context, HTMLContent = option.HTMLContent, userContent = option.userContent, responseFormatType = option.responseFormatType;
            spinner = ora(logStart("AI is answering your question, please wait a moment")).start();
            _context9.next = 4;
            return openai.chat.completions.create({
              model: model,
              messages: [{
                role: 'system',
                content: context
              }, {
                role: 'user',
                name: 'html',
                content: HTMLContent
              }, {
                role: 'user',
                name: 'my',
                content: userContent
              }],
              response_format: {
                type: responseFormatType
              },
              temperature: 0.1
            });
          case 4:
            completion = _context9.sent;
            spinner.succeed(logSuccess("AI has completed your question"));
            content = completion.choices[0].message.content;
            result = responseFormatType === 'json_object' ? JSON.parse(content) : content;
            return _context9.abrupt("return", result);
          case 9:
          case "end":
            return _context9.stop();
        }
      }, _callee9);
    }));
    return _runChat.apply(this, arguments);
  }
  var app = {
    parseElements: function parseElements(HTML, content) {
      var _arguments = arguments;
      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
        var option, model, coderContent, obj, result;
        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              option = _arguments.length > 2 && _arguments[2] !== undefined ? _arguments[2] : {};
              model = option.model;
              coderContent = '';
              if (isObject(content)) {
                coderContent = JSON.stringify(content);
              } else {
                obj = {
                  message: content
                };
                coderContent = JSON.stringify(obj);
              }
              _context6.next = 6;
              return runChat({
                model: model,
                context: PARSE_ELEMENTS_CONTEXT,
                HTMLContent: HTML,
                userContent: coderContent,
                responseFormatType: 'json_object'
              });
            case 6:
              result = _context6.sent;
              return _context6.abrupt("return", result);
            case 8:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }))();
    },
    getElementSelectors: function getElementSelectors(HTML, content) {
      var _arguments2 = arguments;
      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
        var option, model, coderContent, obj, result;
        return _regeneratorRuntime().wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              option = _arguments2.length > 2 && _arguments2[2] !== undefined ? _arguments2[2] : {};
              model = option.model;
              coderContent = '';
              if (isObject(content)) {
                coderContent = JSON.stringify(content);
              } else {
                obj = {
                  message: content,
                  pathMode: 'default'
                };
                coderContent = JSON.stringify(obj);
              }
              _context7.next = 6;
              return runChat({
                model: model,
                context: GET_ELEMENT_SELECTORS_CONTEXT,
                HTMLContent: HTML,
                userContent: coderContent,
                responseFormatType: 'json_object'
              });
            case 6:
              result = _context7.sent;
              return _context7.abrupt("return", result);
            case 8:
            case "end":
              return _context7.stop();
          }
        }, _callee7);
      }))();
    },
    help: function help(content) {
      var _arguments3 = arguments;
      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
        var option, model, result;
        return _regeneratorRuntime().wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              option = _arguments3.length > 1 && _arguments3[1] !== undefined ? _arguments3[1] : {};
              model = option.model;
              _context8.next = 4;
              return runChat({
                model: model,
                context: HELP_CONTEXT,
                HTMLContent: '',
                userContent: content,
                responseFormatType: 'text'
              });
            case 4:
              result = _context8.sent;
              return _context8.abrupt("return", result);
            case 6:
            case "end":
              return _context8.stop();
          }
        }, _callee8);
      }))();
    },
    custom: function custom() {
      return openai;
    }
  };
  return app;
}
function createCrawlOllama(config) {
  var model = config.model,
    clientOptions = config.clientOptions;
  var ollama = new Ollama(clientOptions);
  function runChat(_x25) {
    return _runChat2.apply(this, arguments);
  }
  function _runChat2() {
    _runChat2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(option) {
      var context, HTMLContent, userContent, responseFormatType, spinner, completion, content, result;
      return _regeneratorRuntime().wrap(function _callee13$(_context13) {
        while (1) switch (_context13.prev = _context13.next) {
          case 0:
            context = option.context, HTMLContent = option.HTMLContent, userContent = option.userContent, responseFormatType = option.responseFormatType;
            spinner = ora(logStart("AI is answering your question, please wait a moment")).start();
            _context13.next = 4;
            return ollama.chat({
              model: model,
              messages: [{
                role: 'system',
                content: context
              }, {
                role: 'user',
                content: "html: ".concat(HTMLContent)
              }, {
                role: 'user',
                content: "my: ".concat(userContent)
              }],
              format: {
                type: responseFormatType
              }
            });
          case 4:
            completion = _context13.sent;
            spinner.succeed(logSuccess("AI has completed your question"));
            content = completion.message.content;
            result = responseFormatType === 'json_object' ? JSON.parse(content) : content;
            return _context13.abrupt("return", result);
          case 9:
          case "end":
            return _context13.stop();
        }
      }, _callee13);
    }));
    return _runChat2.apply(this, arguments);
  }
  var app = {
    parseElements: function parseElements(HTML, content) {
      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
        var coderContent, obj, result;
        return _regeneratorRuntime().wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              coderContent = '';
              if (isObject(content)) {
                coderContent = JSON.stringify(content);
              } else {
                obj = {
                  message: content
                };
                coderContent = JSON.stringify(obj);
              }
              _context10.next = 4;
              return runChat({
                context: PARSE_ELEMENTS_CONTEXT,
                HTMLContent: HTML,
                userContent: coderContent,
                responseFormatType: 'json_object'
              });
            case 4:
              result = _context10.sent;
              return _context10.abrupt("return", result);
            case 6:
            case "end":
              return _context10.stop();
          }
        }, _callee10);
      }))();
    },
    getElementSelectors: function getElementSelectors(HTML, content) {
      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {
        var coderContent, obj, result;
        return _regeneratorRuntime().wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              coderContent = '';
              if (isObject(content)) {
                coderContent = JSON.stringify(content);
              } else {
                obj = {
                  message: content,
                  pathMode: 'default'
                };
                coderContent = JSON.stringify(obj);
              }
              _context11.next = 4;
              return runChat({
                context: GET_ELEMENT_SELECTORS_CONTEXT,
                HTMLContent: HTML,
                userContent: coderContent,
                responseFormatType: 'json_object'
              });
            case 4:
              result = _context11.sent;
              return _context11.abrupt("return", result);
            case 6:
            case "end":
              return _context11.stop();
          }
        }, _callee11);
      }))();
    },
    help: function help(content) {
      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {
        var result;
        return _regeneratorRuntime().wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              _context12.next = 2;
              return runChat({
                context: HELP_CONTEXT,
                HTMLContent: '',
                userContent: content,
                responseFormatType: 'text'
              });
            case 2:
              result = _context12.sent;
              return _context12.abrupt("return", result);
            case 4:
            case "end":
              return _context12.stop();
          }
        }, _callee12);
      }))();
    },
    custom: function custom() {
      return ollama;
    }
  };
  return app;
}
export { createCrawl, createCrawlOllama, createCrawlOpenAI };